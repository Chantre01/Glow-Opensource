package net.ccbluex.liquidbounce.features.module.modules.exploit

import net.ccbluex.liquidbounce.api.minecraft.network.IPacket
import net.ccbluex.liquidbounce.api.minecraft.network.play.client.ICPacketPlayerBlockPlacement
import net.ccbluex.liquidbounce.api.minecraft.network.play.client.ICPacketPlayerDigging
import net.ccbluex.liquidbounce.api.minecraft.util.IEnumFacing
import net.ccbluex.liquidbounce.api.minecraft.util.WBlockPos
import net.ccbluex.liquidbounce.event.*
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.features.module.ModuleCategory
import net.ccbluex.liquidbounce.features.module.ModuleInfo
import net.ccbluex.liquidbounce.value.BoolValue
import net.minecraft.network.Packet
import net.minecraft.network.play.client.CPacketClickWindow
import net.minecraft.network.play.client.CPacketEntityAction


import java.util.concurrent.LinkedBlockingQueue

@ModuleInfo(name = "Disabler", description = "Fuck Grim", category = ModuleCategory.EXPLOIT)
class Disabler:Module(){
    private val packetsG = LinkedBlockingQueue<Packet<*>>()
    private val packetsG2 = LinkedBlockingQueue<IPacket>()
    private var pre = false
    private var blockPos: WBlockPos? = null
    private var enumFacing: IEnumFacing? = null

    val post = BoolValue("Post",true)
    private val c0e = BoolValue("ChestStealer",true)
    private val c08 = BoolValue("PlaceBlock",true)
    private val c0b = BoolValue("C0B",true)
    private val fastBreak = BoolValue("FastBreak",true)
    @EventTarget
    fun onMotion(event: MotionEvent) {
        if (post.get()) {
            pre = event.eventState == EventState.PRE
            if (event.eventState == EventState.PRE) {
                try {
                    while (!packetsG2.isEmpty()) {
                        mc.netHandler.addToSendQueue(packetsG2.take())
                    }
                } catch (e: Exception) {
                    e.printStackTrace()
                }
            }
        }
    }
    @EventTarget
    fun onPacket(event: PacketEvent) {
        val packet = event.packet
        if (post.get()) {
            if (packet is CPacketClickWindow && c0e.get()) {
                if (!pre) {
                    event.cancelEvent()
                    packetsG.add(packet)
                }
            }
            if (packet is CPacketEntityAction && c0b.get()) {
                if (!pre) {
                    event.cancelEvent()
                    packetsG.add(packet)
                }
            }
            if (packet is ICPacketPlayerBlockPlacement && c08.get()) {
                if (!pre) {
                    event.cancelEvent()
                    packetsG2.add(packet)
                }
            }
        }

    }
    @EventTarget
    fun onClickBlock(event: ClickBlockEvent) {
        blockPos = event.clickedBlock
        enumFacing = event.WEnumFacing
        if (fastBreak.get()) {
            mc.netHandler.addToSendQueue(
                classProvider.createCPacketPlayerDigging(ICPacketPlayerDigging.WAction.ABORT_DESTROY_BLOCK, blockPos!!, enumFacing!!)
            )
        }
    }
}